---
title: "Kontroll"
editor: visual
---

<iframe src="https://player.vimeo.com/video/1010157139?badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" frameborder="0" allow="autoplay; fullscreen; picture-in-picture; clipboard-write" style="position:absolute;top:0;left:0;width:100%;height:100%;" title="if">
</iframe>

## Små kontrollprosesser

For å sammenligne og gjøre noe basert på en betingelse kan vi bruke **`ifelse()`**. Vi må spesifisere betingelsen først, og så hva som skal returneres dersom betingelsen er sann, og så hva som skal returneres om betingelsen er usann.

```{r}
alder <- c(49, 39, 51, 73, 41)
ifelse(alder < 50, "yngre", "eldre")
```

Dette kan brukes for å lage nye variabler i et datasett:

```{r, echo=FALSE}
suppressMessages(library(tidyverse))

```

```{r}
library(tidyverse)
dt <- data.frame(id = 1:5, alder)
dt %>%
  mutate(alder_kat = ifelse(alder < 50, "yngre", "eldre"))
```

## Store prosesser

For å kontrollere store/lengre prosesser kan vi benytte **`if`** og **`else`**. Disse kan gå over flere linjer og ta formatet:

```{r}
#| eval: false
if (betingelsen){
  print("gjør dette ...")
} else {
  print("gjøre dette istedenfor ...")
}
```

For eksempel:

```{r}
if (all(dt$alder < 70)){
  print("Alle IOer er under 70")
} else {
  print("Alle IOer med alder 70+ er fjernet.")
  dt %>% 
    filter(alder < 70)
}
```
